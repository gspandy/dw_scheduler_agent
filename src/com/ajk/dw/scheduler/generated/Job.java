/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ajk.dw.scheduler.generated;


import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;

import java.nio.ByteBuffer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Job implements org.apache.thrift.TBase<Job, Job._Fields>, java.io.Serializable, Cloneable, Comparable<Job> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Job");

  private static final org.apache.thrift.protocol.TField SCHEDULER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXCUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("excuteId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RUN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField JOB_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobState", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTime", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobTupleSchemeFactory());
  }

  private int schedulerId; // required
  private int configId; // required
  private int taskId; // required
  private int excuteId; // required
  private int jobId; // optional
  private String jobName; // optional
  private String command; // optional
  private String runTime; // optional
  private int jobState; // optional
  private long submitTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEDULER_ID((short)1, "schedulerId"),
    CONFIG_ID((short)2, "configId"),
    TASK_ID((short)3, "taskId"),
    EXCUTE_ID((short)4, "excuteId"),
    JOB_ID((short)5, "jobId"),
    JOB_NAME((short)6, "jobName"),
    COMMAND((short)7, "command"),
    RUN_TIME((short)8, "runTime"),
    JOB_STATE((short)9, "jobState"),
    SUBMIT_TIME((short)10, "submitTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEDULER_ID
          return SCHEDULER_ID;
        case 2: // CONFIG_ID
          return CONFIG_ID;
        case 3: // TASK_ID
          return TASK_ID;
        case 4: // EXCUTE_ID
          return EXCUTE_ID;
        case 5: // JOB_ID
          return JOB_ID;
        case 6: // JOB_NAME
          return JOB_NAME;
        case 7: // COMMAND
          return COMMAND;
        case 8: // RUN_TIME
          return RUN_TIME;
        case 9: // JOB_STATE
          return JOB_STATE;
        case 10: // SUBMIT_TIME
          return SUBMIT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEDULERID_ISSET_ID = 0;
  private static final int __CONFIGID_ISSET_ID = 1;
  private static final int __TASKID_ISSET_ID = 2;
  private static final int __EXCUTEID_ISSET_ID = 3;
  private static final int __JOBID_ISSET_ID = 4;
  private static final int __JOBSTATE_ISSET_ID = 5;
  private static final int __SUBMITTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  
  private _Fields optionals[] = {_Fields.JOB_ID,_Fields.JOB_NAME,_Fields.COMMAND,_Fields.RUN_TIME,_Fields.JOB_STATE,_Fields.SUBMIT_TIME};
  
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEDULER_ID, new org.apache.thrift.meta_data.FieldMetaData("schedulerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("excuteId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_TIME, new org.apache.thrift.meta_data.FieldMetaData("runTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_STATE, new org.apache.thrift.meta_data.FieldMetaData("jobState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
	  
  }

  public Job(
		  
    int schedulerId,
    int configId,
    int taskId,
    int excuteId
    ){
	  this();
	  
	  this.schedulerId = schedulerId;
	  
	  setSchedulerIdIsSet(true);
	  
	  this.configId = configId;
	  
	  setConfigIdIsSet(true);
	  
	  this.taskId = taskId;
	  
	  setTaskIdIsSet(true);
	  
      this.excuteId = excuteId;
      
      setExcuteIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bitfield = other.__isset_bitfield;
    this.schedulerId = other.schedulerId;
    this.configId = other.configId;
    this.taskId = other.taskId;
    this.excuteId = other.excuteId;
    this.jobId = other.jobId;
    if (other.isSetJobName()) {
      this.jobName = other.jobName;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    if (other.isSetRunTime()) {
      this.runTime = other.runTime;
    }
    this.jobState = other.jobState;
    this.submitTime = other.submitTime;
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    setSchedulerIdIsSet(false);
    this.schedulerId = 0;
    setConfigIdIsSet(false);
    this.configId = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setExcuteIdIsSet(false);
    this.excuteId = 0;
    setJobIdIsSet(false);
    this.jobId = 0;
    this.jobName = null;
    this.command = null;
    this.runTime = null;
    setJobStateIsSet(false);
    this.jobState = 0;
    setSubmitTimeIsSet(false);
    this.submitTime = 0;
  }

  public int getSchedulerId() {
    return this.schedulerId;
  }

  public void setSchedulerId(int schedulerId) {
    this.schedulerId = schedulerId;
    setSchedulerIdIsSet(true);
  }

  public void unsetSchedulerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULERID_ISSET_ID);
  }

  /** Returns true if field schedulerId is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedulerId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULERID_ISSET_ID);
  }

  public void setSchedulerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULERID_ISSET_ID, value);
  }

  public int getConfigId() {
    return this.configId;
  }

  public void setConfigId(int configId) {
    this.configId = configId;
    setConfigIdIsSet(true);
  }

  public void unsetConfigId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  /** Returns true if field configId is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  public void setConfigIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGID_ISSET_ID, value);
  }

  public int getTaskId() {
    return this.taskId;
  }

  public void setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getExcuteId() {
    return this.excuteId;
  }

  public void setExcuteId(int excuteId) {
    this.excuteId = excuteId;
    setExcuteIdIsSet(true);
  }

  public void unsetExcuteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCUTEID_ISSET_ID);
  }

  /** Returns true if field excuteId is set (has been assigned a value) and false otherwise */
  public boolean isSetExcuteId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCUTEID_ISSET_ID);
  }

  public void setExcuteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCUTEID_ISSET_ID, value);
  }

  public int getJobId() {
    return this.jobId;
  }

  public void setJobId(int jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
  }

  public void unsetJobId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public String getJobName() {
    return this.jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }

  public void unsetJobName() {
    this.jobName = null;
  }

  /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobName() {
    return this.jobName != null;
  }

  public void setJobNameIsSet(boolean value) {
    if (!value) {
      this.jobName = null;
    }
  }

  public String getCommand() {
    return this.command;
  }

  public void setCommand(String command) {
    this.command = command;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public String getRunTime() {
    return this.runTime;
  }

  public void setRunTime(String runTime) {
    this.runTime = runTime;
  }

  public void unsetRunTime() {
    this.runTime = null;
  }

  /** Returns true if field runTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRunTime() {
    return this.runTime != null;
  }

  public void setRunTimeIsSet(boolean value) {
    if (!value) {
      this.runTime = null;
    }
  }

  public int getJobState() {
    return this.jobState;
  }

  public void setJobState(int jobState) {
    this.jobState = jobState;
    setJobStateIsSet(true);
  }

  public void unsetJobState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBSTATE_ISSET_ID);
  }

  /** Returns true if field jobState is set (has been assigned a value) and false otherwise */
  public boolean isSetJobState() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBSTATE_ISSET_ID);
  }

  public void setJobStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBSTATE_ISSET_ID, value);
  }

  public long getSubmitTime() {
    return this.submitTime;
  }

  public void setSubmitTime(long submitTime) {
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
  }

  public void unsetSubmitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  /** Returns true if field submitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  public void setSubmitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEDULER_ID:
      if (value == null) {
        unsetSchedulerId();
      } else {
        setSchedulerId((Integer)value);
      }
      break;

    case CONFIG_ID:
      if (value == null) {
        unsetConfigId();
      } else {
        setConfigId((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case EXCUTE_ID:
      if (value == null) {
        unsetExcuteId();
      } else {
        setExcuteId((Integer)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((Integer)value);
      }
      break;

    case JOB_NAME:
      if (value == null) {
        unsetJobName();
      } else {
        setJobName((String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((String)value);
      }
      break;

    case RUN_TIME:
      if (value == null) {
        unsetRunTime();
      } else {
        setRunTime((String)value);
      }
      break;

    case JOB_STATE:
      if (value == null) {
        unsetJobState();
      } else {
        setJobState((Integer)value);
      }
      break;

    case SUBMIT_TIME:
      if (value == null) {
        unsetSubmitTime();
      } else {
        setSubmitTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEDULER_ID:
      return Integer.valueOf(getSchedulerId());

    case CONFIG_ID:
      return Integer.valueOf(getConfigId());

    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case EXCUTE_ID:
      return Integer.valueOf(getExcuteId());

    case JOB_ID:
      return Integer.valueOf(getJobId());

    case JOB_NAME:
      return getJobName();

    case COMMAND:
      return getCommand();

    case RUN_TIME:
      return getRunTime();

    case JOB_STATE:
      return Integer.valueOf(getJobState());

    case SUBMIT_TIME:
      return Long.valueOf(getSubmitTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEDULER_ID:
      return isSetSchedulerId();
    case CONFIG_ID:
      return isSetConfigId();
    case TASK_ID:
      return isSetTaskId();
    case EXCUTE_ID:
      return isSetExcuteId();
    case JOB_ID:
      return isSetJobId();
    case JOB_NAME:
      return isSetJobName();
    case COMMAND:
      return isSetCommand();
    case RUN_TIME:
      return isSetRunTime();
    case JOB_STATE:
      return isSetJobState();
    case SUBMIT_TIME:
      return isSetSubmitTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;

    boolean this_present_schedulerId = true;
    boolean that_present_schedulerId = true;
    if (this_present_schedulerId || that_present_schedulerId) {
      if (!(this_present_schedulerId && that_present_schedulerId))
        return false;
      if (this.schedulerId != that.schedulerId)
        return false;
    }

    boolean this_present_configId = true;
    boolean that_present_configId = true;
    if (this_present_configId || that_present_configId) {
      if (!(this_present_configId && that_present_configId))
        return false;
      if (this.configId != that.configId)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_excuteId = true;
    boolean that_present_excuteId = true;
    if (this_present_excuteId || that_present_excuteId) {
      if (!(this_present_excuteId && that_present_excuteId))
        return false;
      if (this.excuteId != that.excuteId)
        return false;
    }

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_jobName = true && this.isSetJobName();
    boolean that_present_jobName = true && that.isSetJobName();
    if (this_present_jobName || that_present_jobName) {
      if (!(this_present_jobName && that_present_jobName))
        return false;
      if (!this.jobName.equals(that.jobName))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_runTime = true && this.isSetRunTime();
    boolean that_present_runTime = true && that.isSetRunTime();
    if (this_present_runTime || that_present_runTime) {
      if (!(this_present_runTime && that_present_runTime))
        return false;
      if (!this.runTime.equals(that.runTime))
        return false;
    }

    boolean this_present_jobState = true && this.isSetJobState();
    boolean that_present_jobState = true && that.isSetJobState();
    if (this_present_jobState || that_present_jobState) {
      if (!(this_present_jobState && that_present_jobState))
        return false;
      if (this.jobState != that.jobState)
        return false;
    }

    boolean this_present_submitTime = true && this.isSetSubmitTime();
    boolean that_present_submitTime = true && that.isSetSubmitTime();
    if (this_present_submitTime || that_present_submitTime) {
      if (!(this_present_submitTime && that_present_submitTime))
        return false;
      if (this.submitTime != that.submitTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_schedulerId = true;
    builder.append(present_schedulerId);
    if (present_schedulerId)
      builder.append(schedulerId);

    boolean present_configId = true;
    builder.append(present_configId);
    if (present_configId)
      builder.append(configId);

    boolean present_taskId = true;
    builder.append(present_taskId);
    if (present_taskId)
      builder.append(taskId);

    boolean present_excuteId = true;
    builder.append(present_excuteId);
    if (present_excuteId)
      builder.append(excuteId);

    boolean present_jobId = true && (isSetJobId());
    builder.append(present_jobId);
    if (present_jobId)
      builder.append(jobId);

    boolean present_jobName = true && (isSetJobName());
    builder.append(present_jobName);
    if (present_jobName)
      builder.append(jobName);

    boolean present_command = true && (isSetCommand());
    builder.append(present_command);
    if (present_command)
      builder.append(command);

    boolean present_runTime = true && (isSetRunTime());
    builder.append(present_runTime);
    if (present_runTime)
      builder.append(runTime);

    boolean present_jobState = true && (isSetJobState());
    builder.append(present_jobState);
    if (present_jobState)
      builder.append(jobState);

    boolean present_submitTime = true && (isSetSubmitTime());
    builder.append(present_submitTime);
    if (present_submitTime)
      builder.append(submitTime);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchedulerId()).compareTo(other.isSetSchedulerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedulerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulerId, other.schedulerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(other.isSetConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, other.configId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExcuteId()).compareTo(other.isSetExcuteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcuteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excuteId, other.excuteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobName()).compareTo(other.isSetJobName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, other.jobName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunTime()).compareTo(other.isSetRunTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTime, other.runTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobState()).compareTo(other.isSetJobState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobState, other.jobState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTime()).compareTo(other.isSetSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTime, other.submitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Job(");
    boolean first = true;

    sb.append("schedulerId:");
    sb.append(this.schedulerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("configId:");
    sb.append(this.configId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("excuteId:");
    sb.append(this.excuteId);
    first = false;
    if (isSetJobId()) {
      if (!first) sb.append(", ");
      sb.append("jobId:");
      sb.append(this.jobId);
      first = false;
    }
    if (isSetJobName()) {
      if (!first) sb.append(", ");
      sb.append("jobName:");
      if (this.jobName == null) {
        sb.append("null");
      } else {
        sb.append(this.jobName);
      }
      first = false;
    }
    if (isSetCommand()) {
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
    }
    if (isSetRunTime()) {
      if (!first) sb.append(", ");
      sb.append("runTime:");
      if (this.runTime == null) {
        sb.append("null");
      } else {
        sb.append(this.runTime);
      }
      first = false;
    }
    if (isSetJobState()) {
      if (!first) sb.append(", ");
      sb.append("jobState:");
      sb.append(this.jobState);
      first = false;
    }
    if (isSetSubmitTime()) {
      if (!first) sb.append(", ");
      sb.append("submitTime:");
      sb.append(this.submitTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSchedulerId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schedulerId' is unset! Struct:" + toString());
    }

    if (!isSetConfigId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'configId' is unset! Struct:" + toString());
    }

    if (!isSetTaskId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' is unset! Struct:" + toString());
    }

    if (!isSetExcuteId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'excuteId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStandardSchemeFactory implements SchemeFactory {
    public JobStandardScheme getScheme() {
      return new JobStandardScheme();
    }
  }

  private static class JobStandardScheme extends StandardScheme<Job> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEDULER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schedulerId = iprot.readI32();
              struct.setSchedulerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configId = iprot.readI32();
              struct.setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCUTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.excuteId = iprot.readI32();
              struct.setExcuteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobId = iprot.readI32();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobName = iprot.readString();
              struct.setJobNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.command = iprot.readString();
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RUN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runTime = iprot.readString();
              struct.setRunTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOB_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobState = iprot.readI32();
              struct.setJobStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.submitTime = iprot.readI64();
              struct.setSubmitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Job struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCHEDULER_ID_FIELD_DESC);
      oprot.writeI32(struct.schedulerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
      oprot.writeI32(struct.configId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCUTE_ID_FIELD_DESC);
      oprot.writeI32(struct.excuteId);
      oprot.writeFieldEnd();
      if (struct.isSetJobId()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI32(struct.jobId);
        oprot.writeFieldEnd();
      }
      if (struct.jobName != null) {
        if (struct.isSetJobName()) {
          oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
          oprot.writeString(struct.jobName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.command != null) {
        if (struct.isSetCommand()) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runTime != null) {
        if (struct.isSetRunTime()) {
          oprot.writeFieldBegin(RUN_TIME_FIELD_DESC);
          oprot.writeString(struct.runTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetJobState()) {
        oprot.writeFieldBegin(JOB_STATE_FIELD_DESC);
        oprot.writeI32(struct.jobState);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeFieldBegin(SUBMIT_TIME_FIELD_DESC);
        oprot.writeI64(struct.submitTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobTupleSchemeFactory implements SchemeFactory {
    public JobTupleScheme getScheme() {
      return new JobTupleScheme();
    }
  }

  private static class JobTupleScheme extends TupleScheme<Job> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.schedulerId);
      oprot.writeI32(struct.configId);
      oprot.writeI32(struct.taskId);
      oprot.writeI32(struct.excuteId);
      BitSet optionals = new BitSet();
      if (struct.isSetJobId()) {
        optionals.set(0);
      }
      if (struct.isSetJobName()) {
        optionals.set(1);
      }
      if (struct.isSetCommand()) {
        optionals.set(2);
      }
      if (struct.isSetRunTime()) {
        optionals.set(3);
      }
      if (struct.isSetJobState()) {
        optionals.set(4);
      }
      if (struct.isSetSubmitTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetJobId()) {
        oprot.writeI32(struct.jobId);
      }
      if (struct.isSetJobName()) {
        oprot.writeString(struct.jobName);
      }
      if (struct.isSetCommand()) {
        oprot.writeString(struct.command);
      }
      if (struct.isSetRunTime()) {
        oprot.writeString(struct.runTime);
      }
      if (struct.isSetJobState()) {
        oprot.writeI32(struct.jobState);
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeI64(struct.submitTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.schedulerId = iprot.readI32();
      struct.setSchedulerIdIsSet(true);
      struct.configId = iprot.readI32();
      struct.setConfigIdIsSet(true);
      struct.taskId = iprot.readI32();
      struct.setTaskIdIsSet(true);
      struct.excuteId = iprot.readI32();
      struct.setExcuteIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.jobId = iprot.readI32();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobName = iprot.readString();
        struct.setJobNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.command = iprot.readString();
        struct.setCommandIsSet(true);
      }
      if (incoming.get(3)) {
        struct.runTime = iprot.readString();
        struct.setRunTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jobState = iprot.readI32();
        struct.setJobStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.submitTime = iprot.readI64();
        struct.setSubmitTimeIsSet(true);
      }
    }
  }

}

